1. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using linear search?

It would take 7 iterations to find the value G using linear search.

2. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using binary search?

It would take 3 iterations to find the value G using binary search.


3. Calculate fib(10), fib(11), fib(12) by hand.

fib(0) = 0
fib(1) = 1
fib(2) = fib(1) + fib(0) = 1
fib(3) = fib(2) + fib(1) = 1 + 1 = 2
fib(4) = fib(3) + fib(2) = 2 + 1 = 3
fib(5) = fib(4) + fib(3) = 3 + 2 = 5
fib(6) = fib(5) + fib(4) = 5 + 3 = 8
fib(7) = fib(6) + fib(5) = 8 + 5 = 13
fib(8) = fib(7) + fib(6) = 13 + 8 = 21
fib(9) = fib(8) + fib(7) = 21 + 13 = 34
fib(10) = fib(9) + fib(8) = 34 + 21 = 55
fib(11) = fib(10) + fib(9) = 55 + 34 = 89
fib(12) = fib(11) + fib(10) = 89 + 55 = 144

Compare the time it takes to run fib(20) between the iterative solution from the previous checkpoint and recursive solutions.

user     system      total        real
iterative  0.000000   0.000000   0.000000 (  0.000011)
recursive  0.000000   0.000000   0.000000 (  0.000008)

1. Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? Would you use an iterative or recursive solution? Explain your reasoning.

I would use linear search. If the collection is unsorted, a binary search would not reduce the number of searches because the target value could be on either half of the midpoint. I would use an iterative solution because with a recursive solution we have to deal with the storage of the call stack and the extra time to unwind the call stack.

2. Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? Would you use an iterative or recursive solution? Explain your reasoning.

I would use a binary search, because with each search we can reduce the collection by half. Having a sorted collection tells us which side of the collection our target value will be on when we compare it to the midpoint value, effectively removing the need to search the other side of the collection. I would use an iterative solution because with a recursive solution we have to deal with the storage of the call stack and the extra time to unwind the call stack.
