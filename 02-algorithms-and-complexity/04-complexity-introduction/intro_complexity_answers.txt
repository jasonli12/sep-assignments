1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n). An example would be:

An algorithm that has O(1) is a high speed bullet train and an algorithm that has O(2n) is a bus.

2. In plain English, what is the best case scenario for binary search?

The best case for a binary search is if what you are looking for is in the middle of your collection or list, so you will find it on the first search when you divide the list in half.

3. In plain English, what is the worst-case scenario for binary search?

The worst case scenario for a binary search is if what you are looking for is at the very beginning or end of the list.

4. In plain English, what is the bounded-case scenario for binary search?

The bounded case scenario for binary search would be if what you are looking for is anywhere between the beginning or middle of the list or between the middle and end of the list.

5. Create a graph using the data below. Here's a CSV with the values you'll need.
https://docs.google.com/spreadsheets/d/1lfJH3F0hJ5EzbQiO7vfkCkJIl-cIOp3qzXyvXwzuAk4/edit#gid=0

6. What is the limit of the function above as n approaches infinity?
Infinity

7. What is the Big-O of an algorithm that has the data points above?
Big-O of exponential time

8. Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.

def worst_case_iterations(n)
  for i in 1..n
    p "Worst-case number of iterations for collection of size #{i} is #{i}"
  end
end

Table link: https://docs.google.com/spreadsheets/d/1lfJH3F0hJ5EzbQiO7vfkCkJIl-cIOp3qzXyvXwzuAk4/edit#gid=1720316641

9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.

https://docs.google.com/spreadsheets/d/1lfJH3F0hJ5EzbQiO7vfkCkJIl-cIOp3qzXyvXwzuAk4/edit#gid=1720316641

10. What is the Big-O of binary search?
O(log n)

11. What is the Big-Ω of binary search?
O(1)

12. What is the Big-Ө of binary search?
O(log n)
