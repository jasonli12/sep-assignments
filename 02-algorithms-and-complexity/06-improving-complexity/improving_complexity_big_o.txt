1. Improving_complexity_version_one - The Big-O is O(n^2) as we need to loop through each item in the array, remove the item and compare each item to each item in the sorted array until we find where to insert the item. The sorting method here is insertion sort.

2. Improving_complexity_version_two - The Big-O is O(nlog(n)) as the number of layers or number of times we need to sort follows log(n) and at each layer, we need to compare each element, for a total of n elements, to determine which comes first.

3. Improving_complexity_version_three - The Big-O is O(n^2) because when we insert each item from the collection into the linked list, we need to compare the value of the item to each value in the linked list until we find the right position to insert. Instead of storing an entire array together in memory, we are using the nodes in a linked list to connected a sorted list together and the sorting function happens during insertion.
